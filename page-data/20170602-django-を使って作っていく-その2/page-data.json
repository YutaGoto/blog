{"componentChunkName":"component---src-templates-blog-post-js","path":"/20170602-django-を使って作っていく-その2/","result":{"data":{"site":{"siteMetadata":{"title":".ごっちの日記"}},"markdownRemark":{"id":"b82aaae1-f110-581e-814b-fc49f72f7ca9","excerpt":"どうもこんにちは。ごっちです。 ブログシステムを作っていっています。その活動ログ。 今日の成果 モデルの修正（中間テーブル回り） 管理ページの実装 List ページ  タイトルのほかにタグリストも表示させました。 Edit ページ   別 Window…","html":"<p>どうもこんにちは。ごっちです。</p>\n<p>ブログシステムを作っていっています。その活動ログ。</p>\n<h2>今日の成果</h2>\n<ul>\n<li>モデルの修正（中間テーブル回り）</li>\n<li>管理ページの実装</li>\n</ul>\n<h2>List ページ</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/3816/0*yJInZDckl4jLRpoU.PNG\"></p>\n<p>タイトルのほかにタグリストも表示させました。</p>\n<h2>Edit ページ</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/3816/0*L0QP89_rcGniz5HB.PNG\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/0*Wzkp4MCwNa4HQkCv.PNG\"></p>\n<p>別 Window が開いてタグの編集ができます。もう少しスマートにいけそうですけどね。</p>\n<h2>詰まったところ</h2>\n<p>やはり、多対多のテーブル構造をどうやって管理画面で編集できるようにするかで詰まりましたね。。。</p>\n<p><a href=\"http://docs.djangoproject.jp/en/latest/ref/contrib/admin/#id10\">ドキュメント</a>を探していい具合に実装するのにかなり苦労した。。。</p>\n<p>っで結局こうなりました。</p>\n<h2>blogs/models.py</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.db import models\n\nclass Tag(models.Model):\n    name = models.CharField(max_length = 30)\n\n    def __str__(self):\n        return self.name\n\nclass Post(models.Model):\n    title = models.CharField(max_length = 30)\n    body = models.TextField(max_length = 1000)\n    # モデルで through を使うときはこんな感じに書くようです。\n    # PostsTagを通じてTagと紐づかせます。\n    tags = models.ManyToManyField(Tag, through=&#39;PostsTag&#39;)\n\n    def __str__(self):\n        return self.title\n\nclass PostsTag(models.Model):\n    # お互いのモデルの外部キーを持っておきます。\n    post = models.ForeignKey(Post)\n    tag = models.ForeignKey(Tag)</code></pre></div>\n<h2>blogs/admin.py</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.contrib import admin\n\nfrom .models import Post, PostsTag, Tag\n\nclass PostsTagInline(admin.TabularInline):\n    model = PostsTag\n    extra = 1\n\nclass PostAdmin(admin.ModelAdmin):\n    # Postと同時にTagも編集できるようにInlineを設定する\n    inlines = [PostsTagInline]\n    list_display = (&#39;title&#39;, &#39;_tags&#39;) # ListViewでタグリストも表示できるようにする\n\n    def _tags(self, post):\n        return &#39;,&#39;.join([tag.name for tag in post.tags.all()])\n\nclass TagAdmin(admin.ModelAdmin):\n    inlines = [PostsTagInline]\n\n# PostとTagをAdminで編集できるようにする。\nadmin.site.register(Post, PostAdmin)\nadmin.site.register(Tag, TagAdmin)</code></pre></div>\n<h2>所感</h2>\n<p>中間テーブルで Through させておけば、 register の設定しなくてもいいかなぁと思ってたけど、そんなことはなかった。というところですね。。。</p>\n<p>次はアプリページのビューを作っていこ。</p>\n<h2>References</h2>\n<ul>\n<li>Django を使って作っていく その 1, <a href=\"https://medium.com/@gggooottto/django-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8F-%E3%81%9D%E3%81%AE1-fcf01d09f3c6\">https://medium.com/@gggooottto/django-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8F-%E3%81%9D%E3%81%AE1-fcf01d09f3c6</a></li>\n<li>Django チュートリアルを進めていく 2 (docker-compose を使って), <a href=\"https://medium.com/@gggooottto/django-%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%92%E9%80%B2%E3%82%81%E3%81%A6%E3%81%84%E3%81%8F2-docker-compose%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6-4e67a945ddf\">https://medium.com/@gggooottto/django-%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%92%E9%80%B2%E3%82%81%E3%81%A6%E3%81%84%E3%81%8F2-docker-compose%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6-4e67a945ddf</a></li>\n<li>Django チュートリアルを進めていく 7 (docker-compose を使って), <a href=\"https://medium.com/@gggooottto/django-%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%92%E9%80%B2%E3%82%81%E3%81%A6%E3%81%84%E3%81%8F7-docker-compose%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6-247f3dac26e5\">https://medium.com/@gggooottto/django-%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%92%E9%80%B2%E3%82%81%E3%81%A6%E3%81%84%E3%81%8F7-docker-compose%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6-247f3dac26e5</a></li>\n<li>Django admin サイト, <a href=\"http://docs.djangoproject.jp/en/latest/ref/contrib/admin/#id10\">http://docs.djangoproject.jp/en/latest/ref/contrib/admin/#id10</a></li>\n<li>Django の Admin(管理サイト)で ManyToManyField を使いたいときの方法, <a href=\"http://qiita.com/masutaro/items/502b6e92de7d99939741\">http://qiita.com/masutaro/items/502b6e92de7d99939741</a></li>\n<li>YutaGoto/blog<em>system</em>on<em>django, [<a href=\"https://github.com/YutaGoto/blog\">https://github.com/YutaGoto/blog</a></em>system<em>on</em>django](<a href=\"https://github.com/YutaGoto/blog_system_on_django\">https://github.com/YutaGoto/blog_system_on_django</a>)</li>\n</ul>\n<p><em>Originally published at <a href=\"https://gist.github.com/YutaGoto/1cc4f8f2a6d2fb8efc49ac6a4f6088e1\">gist.github.com</a>.</em></p>","frontmatter":{"title":"Django を使って作っていく その2","date":"June 02, 2017","description":"Django を使って作っていく その2"}},"previous":{"fields":{"slug":"/20170531-django-を使って作っていく-その1/"},"frontmatter":{"title":"Django を使って作っていく その1"}},"next":{"fields":{"slug":"/20170606-django-を使って作っていく-その3/"},"frontmatter":{"title":"Django を使って作っていく その3"}}},"pageContext":{"id":"b82aaae1-f110-581e-814b-fc49f72f7ca9","previousPostId":"0252899d-ba18-5e83-b4eb-bc96f11eb27d","nextPostId":"f5885abb-e3ea-548e-bb3b-edd88f099dc0"}},"staticQueryHashes":["2137539840","2201837728"]}