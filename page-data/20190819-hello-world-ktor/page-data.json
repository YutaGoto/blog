{"componentChunkName":"component---src-templates-blog-post-js","path":"/20190819-hello-world-ktor/","result":{"data":{"site":{"siteMetadata":{"title":".ごっちの日記"}},"markdownRemark":{"id":"288ab83d-c65b-55bf-9e7f-1eabbb2463b8","excerpt":"こんにちは、.ごっちです。 ちょっと前から気になっていた Kotlin をこの土日で触っていたので、備忘録で環境構築のことについて書きます。 Kotlin なので Android アプリでも良かったんですが、そこまで作りたいものもないのとサーバサードエンジニアを名乗っているので、Web…","html":"<p>こんにちは、.ごっちです。</p>\n<p>ちょっと前から気になっていた Kotlin をこの土日で触っていたので、備忘録で環境構築のことについて書きます。</p>\n<p>Kotlin なので Android アプリでも良かったんですが、そこまで作りたいものもないのとサーバサードエンジニアを名乗っているので、Web アプリケーションのフレームワークである <strong>Ktor</strong> を触ってみました</p>\n<h2>Ktor</h2>\n<p><img src=\"https://cdn-images-1.medium.com/max/8870/1*4aBfRqsFco67-aiA1EFFmg.png\">\n<a href=\"https://ktor.io/\"><strong>Ktor - asynchronous Web framework for Kotlin</strong>\n<em>Ktor is a framework for building asynchronous servers and clients in connected systems using the powerful Kotlin…</em>ktor.io</a></p>\n<p>Kotlin 製の Web アプリケーションのフレームワークのことです。</p>\n<h2>環境構築</h2>\n<p><a href=\"https://ktor.io/quickstart/quickstart/intellij-idea.html\"><strong>Quick Start IntelliJ IDEA</strong>\n<em>There is a IntelliJ plugin adding a project wizard for Ktor projects. It will configure a project for you, it will…</em>ktor.io</a></p>\n<p>JetBrain の IntelliJ IDEA を使ったものを参考にすすめました。</p>\n<p>最初に Java SDK を Oracle のページから落としてきます(これを見つけるのに 3 時間くらい探し回った)\n<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\"><strong>Java SE Development Kit 8 Downloads</strong>\n<em>Thank you for downloading this release of the Java™ Platform, Standard Edition Development Kit (JDK™). The JDK is a…</em>www.oracle.com</a></p>\n<p>あと、IntelliJ IDEA の Community Edition も公式から落としてきます。Community Edition は無料で使えるのでいいですね！！！\n<a href=\"https://www.jetbrains.com/idea/\"><strong>IntelliJ IDEA: The Java IDE for Professional Developers by JetBrains</strong>\n<em>A Capable and Ergonomic Java IDE for Enterprise Java, Scala, Kotlin and much more…</em>www.jetbrains.com</a></p>\n<p>IntelliJ IDEA を立ち上げたら速攻で環境設定を開いて Ktor というプラグインをいれます。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2028/1*hnesuBJ3w_8RJGSXb4On6g.png\"></p>\n<p>いれたら、プロジェクトを新規作成します。</p>\n<p>新規作成で Ktor を選択します。サーバーとクライアントはいい感じのものを選びます。今回はサーバーを Freemaker、クライアントを Apache HttpClient Engine にしました。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2424/1*J2mq-BBM23GaL0u23Lkv1Q.png\"></p>\n<p>新規作成が完了すると、そこそこな数のファイルができあがります。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2800/1*2BVLjm_chF0nNg6CYvEdOA.png\"></p>\n<p>ひとまず動くかどうかみたいので、 Application.tk の main 関数の横にある ▶ のメニューを開いて実行します。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*ZQqTwpnGrTo9Gi2_22GWdw.png\"></p>\n<p>build が終わると <a href=\"http://0.0.0.0:8080\">http://0.0.0.0:8080</a> にアクセスできそうなリンクがログに表示されるので、実際にアクセスしてみます。 実際は 0.0.0.0 じゃなくても localhost でもアクセスできます。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*fXG6AnFZVn1PpmKKAdbYXw.png\"></p>\n<p>このように表示されたら問題なしです。ここまでできれば一旦環境はできあがり！</p>\n<h2>ちょっといじる</h2>\n<p>ひとまずページを追加したいので、 application.tk にある routing を増やします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">get(&quot;/about&quot;) {\n    val user = User(&quot;.ごっち&quot;, &quot;test@example.com&quot;)\n    call.respond(FreeMarkerContent(&quot;about.ftl&quot;, mapOf(&quot;user&quot; to user), &quot;e&quot;))\n}</code></pre></div>\n<p>上のコードの User はファイルの最下部にとりま定義しておきます(型定義しているあたり Kotlin ぽくてよい?)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">data class User(var name: String, var email: String)</code></pre></div>\n<p>routing だけ増やしてもしょうがないので、template ファイルも追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;#-- resouces/templates/about.ftl --&gt;\n&lt;#-- @ftlvariable name=&quot;data&quot; type=&quot;com.example.IndexData&quot; --&gt;\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;h2&gt;Hello ${user.name}!&lt;/h2&gt;\n        &lt;p&gt;Your email address is ${user.email}&lt;/p&gt;\n        &lt;p&gt;This System works with Ktor that made with Kotlin!&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p>Freemarker 用のファイルになっているらしいです。\n<a href=\"https://freemarker.apache.org/\"><strong>What is Apache FreeMarker™?</strong>\n<em>Apache FreeMarker™ is a template engine: a Java library to generate text output (HTML web pages, e-mails, configuration…</em>freemarker.apache.org</a></p>\n<p>ここまでできたら、再度実行しなおしてアクセスしてみます。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*wyTeGfD3cqN7rXjFfWp-0A.png\"></p>\n<p>こんな感じのページになっていたら OK です！</p>\n<h2>テスト</h2>\n<p>Ktor のプロジェクトを作るとデフォルトでテスト用のファイルとディレクトリが生成されるので、早速試してみます。\n<a href=\"https://github.com/zensum/ktor-prometheus-feature/blob/master/.circleci/config.yml\"><strong>zensum/ktor-prometheus-feature</strong>\n<em>You can’t perform that action at this time. You signed in with another tab or window. You signed out in another tab or…</em>github.com</a></p>\n<p>このプロジェクトの設定をお借りします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">version: 2\njobs:\n  test:\n    working_directory: ~/helloKtor\n    docker:\n      - image: gradle:4.10-jdk8\n    steps:\n      - checkout\n      - restore_cache:\n          key: circleci-hello-ktor-{{ checksum &quot;build.gradle&quot; }}\n      - run: ./gradlew dependencies\n      - save_cache:\n          paths:\n            - ~/.gradle\n          key: circleci-hello-ktor-{{ checksum &quot;build.gradle&quot; }}\n      - run: ./gradlew build\n      - run: ./gradlew test\n\nworkflows:\n  version: 2\n  build:\n    jobs:\n      - test</code></pre></div>\n<p>gradle さえ入れておけば動くのでそうしてみました。CircleCI 公式の gradle の docker プロジェクトはなさそうだったので、gradle 公式のものを拝借しました。もしかしたらあるかもしれないですが、そこまでこだわる必要もないので一旦このままで行きます。\n<a href=\"https://hub.docker.com/_/gradle\"><strong>gradle - Docker Hub</strong>\n<em>Gradle is a build tool with a focus on build automation and support for multi-language development.</em>hub.docker.com</a></p>\n<p>GitHub へプッシュして実行させます。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*liDVxDjozN4DpK7dxK0btw.png\"></p>\n<p>とくに問題なければ ✅ になるはずです。</p>\n<h2>今回のソース</h2>\n<p><a href=\"https://github.com/YutaGoto/helloKtor\"><strong>YutaGoto/helloKtor</strong>\n<em>You can’t perform that action at this time. You signed in with another tab or window. You signed out in another tab or…</em>github.com</a></p>\n<p>ここにあります。</p>\n<h2>所感</h2>\n<p>Ruby や Python と違って環境構築が微妙に大変でした。（とくに JDK 周りが）</p>\n<p>シンプルに plintln(“Hello Kitlin!“)で出力させるのもありだったんですが、そこまでおもしろくないのでかんたんなフレームワークにしてみました。</p>\n<p>個人ブログみたいなものもググっててそこまで見かけないので、公式をみながらもうちょっと深ぼっていきます。</p>\n<p>次回は Todo 管理の Web アプリを作ります。</p>","frontmatter":{"title":"Hello World! Ktor","date":"August 19, 2019","description":"Hello World! Ktor"}},"previous":{"fields":{"slug":"/20190617-shinjuku-mokumokuでgrpcチュートリアルをやった/"},"frontmatter":{"title":"Shinjuku mokumokuでgRPCチュートリアルをやった"}},"next":{"fields":{"slug":"/20191019-im-sparqlをslackのコマンドで叩くやつを作る/"},"frontmatter":{"title":"IM@SparqlをSlackのコマンドで叩くやつを作る"}}},"pageContext":{"id":"288ab83d-c65b-55bf-9e7f-1eabbb2463b8","previousPostId":"f9455726-ce4e-5b2e-be56-a88842facd46","nextPostId":"d44a0b95-7fae-5ee5-b975-7305d1f61bb8"}},"staticQueryHashes":["2137539840","2201837728"]}