{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/20191019-im-sparqlをslackのコマンドで叩くやつを作る/",
    "result": {"data":{"site":{"siteMetadata":{"title":".ごっちの日記","siteUrl":"https://yutagoto.github.io"}},"markdownRemark":{"id":"2be1b3bb-2f6f-55b7-b824-a7f054c6ad1c","excerpt":"こんにちは、 .ごっちです。 これはアイマスもくもく会 003 のアウトプットです。 — IM@Sparql をいろいろな手段を使ってたたいているのは去年からやっていました。\nim@sparql を TypeScript でたたいてみる\n*こんにちは、.ごっちです。*medium.com…","html":"<p>こんにちは、 .ごっちです。</p>\n<p>これはアイマスもくもく会 003 のアウトプットです。</p>\n<p>—</p>\n<p>IM@Sparql をいろいろな手段を使ってたたいているのは去年からやっていました。\n<a href=\"https://medium.com/@gggooottto/im-sparql%E3%82%92typescript%E3%81%A7%E3%81%9F%E3%81%9F%E3%81%84%E3%81%A6%E3%81%BF%E3%82%8B-e4610a827588\"><strong>im@sparql を TypeScript でたたいてみる</strong>\n*こんにちは、.ごっちです。*medium.com</a>\n<a href=\"https://medium.com/@gggooottto/%E4%BB%8A%E6%97%A5%E8%AA%95%E7%94%9F%E6%97%A5%E3%81%AE%E3%82%A2%E3%82%A4%E3%83%89%E3%83%AB%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8Bcircleci-orb%E3%82%92%E3%81%A4%E3%81%8F%E3%81%A3%E3%81%9F%E3%81%8A%E8%A9%B1-fff413118a40\"><strong>今日誕生日のアイドルを出力する CircleCI orb をつくったお話</strong>\n*こんにちは、 .ごっちです。*medium.com</a></p>\n<p>今回は Slack の /コマンドを使います。</p>\n<h2>準備</h2>\n<p>Slack アプリを用意します。このあたりは公式のチュートリアルがとても参考になります。\n<a href=\"https://slack.dev/bolt/ja-jp/tutorial/getting-started\"><strong>Slack | Bolt</strong>\n*このガイドでは、Bolt を使用して Slack アプリを起動し実行する方法について説明します。その過程で、新しい Slack アプリを作成し、ローカル環境を設定し、Slack…*slack.dev</a></p>\n<p>チュートリアルに則って言語は Nodejs を使います。あとは SlackApp を新規で作成したり開発用の環境変数を用意したり作業用の Slack のワークスペースを用意したりします。</p>\n<h2>実装</h2>\n<p>ざっくりコード ↓</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const fetch = require('node-fetch');\nconst { App } = require('@slack/bolt');\n\nconst app = new App({\n  token: process.env.SLACK_BOT_TOKEN,\n  signingSecret: process.env.SLACK_SIGNING_SECRET\n});\n\napp.command('/imasparql', async ({ command, ack, say }) => {\n  ack();\n\n  const url = \"https://sparql.crssnky.xyz/spql/imas/query?query=\" + encodeURIComponent(command.text.replace(\"`\", \"\").replace(\"`\", \"\"));\n\n  fetch(url).then(function(response) {\n    return response.json();\n  })\n  .then(function(imasJson) {\n    say(JSON.stringify(imasJson));\n  })\n\n});\n\n(async () => {\n  await app.start(process.env.PORT || 3000);\n  console.log('⚡️ Bolt app is running!');\n})();</code></pre></div>\n<h2>実際の動き</h2>\n<iframe src=\"https://medium.com/media/2ae35e3645829c32cacfd50d67423204\" frameborder=0></iframe>\n<h2>ちょっとだけコード解説</h2>\n<p>/imasparql の入力があったら、反応するようになっています。</p>\n<p>command.text で /以降のテキストを取得できるので、その文字列をエンコードして get パラメータとして渡しています。</p>\n<p>ここで不具合っぽいのが、そのまま渡すと ‘が全角の状態でエンコードされてリクエストに失敗するという地味なものがあります。。なので、Sparql のクエリとして投げるときは `を始めと終わりにたさなければいけません(直したい</p>\n<p>のこりは実際に fetch リクエストを送って、返却された JSON をテキスト化して Slack に投げているだけです。</p>\n<h2>今後</h2>\n<p>RT などの反応をみたところ、需要がありそうななさそうな状態だったけども自分には需要があるので、もうちょっと作り込もうかと思います。</p>\n<p>作りきったらサーバーなりに乗っけて Slack にアプリ申請でも出そうかと思います。</p>\n<p>—</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/4400/1*BGBbLNQ3EwT8NOPUc7M3og.png\" alt=\"\"></p>\n<p>ちなみに Twitter の動画にあったこれは</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PREFIX schema: &lt;http://schema.org/>\nPREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX imas: &lt;https://sparql.crssnky.xyz/imasrdf/URIs/imas-schema.ttl#>\nSELECT (sample(?n) as ?name)\nWHERE {\n  ?s rdf:type imas:Idol;\n     schema:name|imas:nameKana ?on;\n     schema:name ?n;\n  FILTER(CONTAINS(str(?on), 'あまみ')).\n}group by(?n)</code></pre></div>\n<p>で取得できます。</p>","fields":{"slug":"/20191019-im-sparqlをslackのコマンドで叩くやつを作る/"},"frontmatter":{"title":"IM@SparqlをSlackのコマンドで叩くやつを作る","date":"October 19, 2019","description":"IM@SparqlをSlackのコマンドで叩くやつを作る"}},"previous":{"fields":{"slug":"/20190819-hello-world-ktor/"},"frontmatter":{"title":"Hello World! Ktor"}},"next":{"fields":{"slug":"/20191208-アイマスハッカソンでミリシタのuiを作ったお話/"},"frontmatter":{"title":"アイマスハッカソンでミリシタのUIを作ったお話"}}},"pageContext":{"id":"2be1b3bb-2f6f-55b7-b824-a7f054c6ad1c","previousPostId":"528cb650-7b26-5189-8529-510dc0072fa2","nextPostId":"07ffae76-9d53-5465-9941-be09d66f43a4"}},
    "staticQueryHashes": ["2137539840","2183174749"]}