{"componentChunkName":"component---src-templates-blog-post-js","path":"/20170512-dockerでrailsプロジェクトを作ってみた/","result":{"data":{"site":{"siteMetadata":{"title":".ごっちの日記","siteUrl":"https://yutagoto.github.io"}},"markdownRemark":{"id":"1f499595-27b0-5571-91ec-25f0518f6dca","excerpt":"どうもこんにちは、ごっちです。 windows で mastodon を動かしてみようとした話 でやろうと思っていた Docker の勉強。ようやく着手。 今回は Rails プロジェクトを New するところからやってみようと思ったのです。 公式の QuickStart…","html":"<p>どうもこんにちは、ごっちです。</p>\n<p><a href=\"https://medium.com/@gggooottto/windows%E3%81%A7mastodon%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F%E8%A9%B1-%E5%BE%AE%E5%A6%99%E3%81%AB%E5%A4%B1%E6%95%97-fbd721303bdc\">windows で mastodon を動かしてみようとした話</a> でやろうと思っていた Docker の勉強。ようやく着手。</p>\n<p>今回は Rails プロジェクトを New するところからやってみようと思ったのです。</p>\n<p>公式の <a href=\"https://docs.docker.com/compose/rails/\">QuickStart</a> を参考に進めていきますよ。</p>\n<h2>ディレクトリの用意</h2>\n<p>プロジェクト用のディレクトリを用意します。今回のプロジェクト名は /myapp とします。 myapp ディレクトリを作ります。</p>\n<h2>Dockerfile</h2>\n<p>Dockerfile を用意します。今回は ruby 2.4.1 を使おうと思います。</p>\n<p>コマンドか何かで Dockerfile ファイル作って、以下を記述します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM ruby:2.4.1\nRUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejs\nRUN mkdir /myapp\nWORKDIR /myapp\nADD Gemfile /myapp/Gemfile\nADD Gemfile.lock /myapp/Gemfile.lock\nRUN bundle install\nADD . /myapp</code></pre></div>\n<h2>Gemfile</h2>\n<p>Gemfile を用意します。その中で Rails のバージョンも指定しますよ。</p>\n<p>コマンドか何かで Gemfile ファイルを作って、以下を記述します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">source &#39;https://rubygems.org&#39;\ngem &#39;rails&#39;, &#39;5.1.0&#39;</code></pre></div>\n<p>Rails 5.1.0 を使おうと思います。ついてに Gemfile.lock ファイルもコマンドか何かで作っておきます。</p>\n<h2>docker-compose.yml</h2>\n<p>docker-compose.yml を用意します。 もろもろ設定やコマンドを記述します。</p>\n<p>コマンドか何かで docker-compose.yml ファイルを作って、以下を記述します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">version: &#39;2&#39;\nservices:\n  db:\n    image: postgres\n  web:\n    build: .\n    command: bundle exec rails s -p 3000 -b &#39;0.0.0.0&#39;\n    volumes:\n      - .:/myapp\n    ports:\n      - &quot;3000:3000&quot;\n    depends_on:\n      - db</code></pre></div>\n<h2>rails new</h2>\n<p>ここで rails new で Rails プロジェクトを一気に作ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose run web rails new . --force --database=postgresql --skip-bundle\n...</code></pre></div>\n<p>今回は PostgreSQL を使用します。んで、もろもろ処理が終わると さっき作った Gemfile の中身も充実したかと思います。</p>\n<h2>database.yml</h2>\n<p>config/database.yml で DB 設定をします。</p>\n<p>なにも変なことをしていなければ、以下の書き方で動くと思います。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">default: &amp;default\n  adapter: postgresql\n  encoding: utf8\n  charset: utf8\n  timeout: 5000\n  pool: &lt;%= ENV.fetch(&quot;RAILS_MAX_THREADS&quot;) { 5 } %&gt;\n\ndevelopment:\n  &lt;&lt;: *default\n  database: myapp_development\n  username: postgres\n  password:\n  host: db</code></pre></div>\n<p>test, production 環境で使用する場合はそれに応じた設定をします。</p>\n<h2>docker-compose build</h2>\n<p>ビルドします</p>\n<p>上記コマンドは、 Gemfile を書き換えるたびにする必要があります。</p>\n<h2>Rails サーバの起動</h2>\n<p>以下のコマンドで Rails サーバの起動をします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose up\nmyapp_db_1 is up-to-date\nmyapp_web_1 is up-to-date\nAttaching to myapp_db_1, myapp_web_1\nweb_1  | =&gt; Booting Puma\nweb_1  | =&gt; Rails 5.1.0 application starting in development on [http://0.0.0.0:3000](http://0.0.0.0:3000)\nweb_1  | =&gt; Run `rails server -h` for more startup options</code></pre></div>\n<p>こんな感じで動いていそうであれば成功です。</p>\n<h2>DB の作成</h2>\n<p>今の状態ではテーブルは何もないけれども、作っておきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose run web rake db:create</code></pre></div>\n<p>さて、もろもろセットアップが終わったところでブラウザでの確認をします。</p>\n<p><a href=\"http://localhost:3000\">http://localhost:3000</a> にアクセスします。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3152/0*CYBC_fRTuwQP4X6s.PNG\"></p>\n<p>こんな感じに表示されれば成功です！やりました！！うれしい！</p>\n<h2>困ったこと</h2>\n<p><a href=\"https://medium.com/@gggooottto/windows%E3%81%A7mastodon%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F%E8%A9%B1-%E5%BE%AE%E5%A6%99%E3%81%AB%E5%A4%B1%E6%95%97-fbd721303bdc\">windows で mastodon を動かしてみようとした話</a> の残骸が残っていたので、 docker-compose up するときに衝突してしまってあら大変。</p>\n<p><a href=\"http://qiita.com/tifa2chan/items/e9aa408244687a63a0ae\">Docker イメージとコンテナの削除方法</a> を参考に Mastodon のコンテナとイメージを削除しました。</p>\n<p><em>マシンが若干暴走して再起動が走ってしまってログが残っていない。悲しい</em></p>\n<p>docker ps -a でコンテナを確認して、 docker rm [コンテナ ID] で該当のコンテナを削除します。</p>\n<p>docker images で Docker イメージを確認して、 docker rmi [イメージ ID] で Docker イメージを削除します。</p>\n<h2>References</h2>\n<ul>\n<li>Quickstart: Compose and Rails, <a href=\"https://docs.docker.com/compose/rails/\">https://docs.docker.com/compose/rails/</a></li>\n<li>Docker イメージとコンテナの削除方法, <a href=\"http://qiita.com/tifa2chan/items/e9aa408244687a63a0ae\">http://qiita.com/tifa2chan/items/e9aa408244687a63a0ae</a></li>\n<li>windows で mastodon を動かしてみようとした話（微妙に失敗）, <a href=\"https://medium.com/@gggooottto/windows%E3%81%A7mastodon%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F%E8%A9%B1-%E5%BE%AE%E5%A6%99%E3%81%AB%E5%A4%B1%E6%95%97-fbd721303bdc\">https://medium.com/@gggooottto/windows%E3%81%A7mastodon%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F%E8%A9%B1-%E5%BE%AE%E5%A6%99%E3%81%AB%E5%A4%B1%E6%95%97-fbd721303bdc</a></li>\n<li>library/ruby, <a href=\"https://hub.docker.com/_/ruby/\">https://hub.docker.com/_/ruby/</a></li>\n<li>YutaGoto/rails<em>docker, [<a href=\"https://github.com/YutaGoto/rails\">https://github.com/YutaGoto/rails</a></em>docker](<a href=\"https://github.com/YutaGoto/rails_docker\">https://github.com/YutaGoto/rails_docker</a>)</li>\n<li>Gist, <a href=\"https://gist.github.com/YutaGoto/e1d7beac11cdcabfb69a225a718751b8\">https://gist.github.com/YutaGoto/e1d7beac11cdcabfb69a225a718751b8</a></li>\n</ul>\n<p><em>Originally published at <a href=\"https://gist.github.com/YutaGoto/e1d7beac11cdcabfb69a225a718751b8\">gist.github.com</a>.</em></p>","fields":{"slug":"/20170512-dockerでrailsプロジェクトを作ってみた/"},"frontmatter":{"title":"DockerでRailsプロジェクトを作ってみた","date":"May 12, 2017","description":"DockerでRailsプロジェクトを作ってみた"}},"previous":{"fields":{"slug":"/20170511-windowsでmastodonを動かしてみようとした話-微妙に失敗/"},"frontmatter":{"title":"windowsでmastodonを動かしてみようとした話（微妙に失敗）"}},"next":{"fields":{"slug":"/20170516-docker-composeでphp7を動かしてみる/"},"frontmatter":{"title":"Docker ComposeでPHP7を動かしてみる"}}},"pageContext":{"id":"1f499595-27b0-5571-91ec-25f0518f6dca","previousPostId":"f6feb734-b6f2-5d74-aff8-a23b60a2396b","nextPostId":"4ed8f1dd-d5d2-5d3f-bc4e-9a83f67385a2"}},"staticQueryHashes":["2137539840","2201837728"]}