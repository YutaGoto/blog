{"version":3,"file":"component---src-pages-tags-tsx-cb91ef5cca1892c87b0e.js","mappings":"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","sources":["webpack://yutagoto-blog/./src/components/Tag.tsx","webpack://yutagoto-blog/./src/components/ArticleCard.tsx","webpack://yutagoto-blog/./src/components/fontawesome.ts","webpack://yutagoto-blog/./src/components/Bio.tsx","webpack://yutagoto-blog/./src/components/ButtonLink.tsx","webpack://yutagoto-blog/./src/components/Layout.tsx","webpack://yutagoto-blog/./src/components/TagList.tsx","webpack://yutagoto-blog/./src/components/seo.tsx","webpack://yutagoto-blog/./src/pages/tags.tsx"],"sourcesContent":["import { Link } from \"gatsby\"\nimport React from \"react\"\n\ninterface TagProps {\n  tag: GatsbyTypes.Maybe<string>\n  className?: string\n  withLink?: boolean\n}\n\nexport const Tag = ({ tag, className = \"\", withLink = true }: TagProps) => {\n  return (\n    <span\n      className={`${className} rounded bg-emerald-800 py-1 px-2 text-sm text-gray-100`}\n    >\n      {withLink ? <Link to={`/tags/${tag}`}>{tag}</Link> : tag}\n    </span>\n  )\n}\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport { Tag } from \"./Tag\"\n\ninterface ArticleCardProps {\n  post: Pick<GatsbyTypes.MarkdownRemark, \"excerpt\"> & {\n    readonly fields: GatsbyTypes.Maybe<Pick<GatsbyTypes.Fields, \"slug\">>\n    readonly frontmatter: GatsbyTypes.Maybe<\n      Pick<GatsbyTypes.Frontmatter, \"description\" | \"title\" | \"date\" | \"tags\">\n    >\n  }\n}\n\nexport const ArticleCard = ({ post }: ArticleCardProps) => {\n  const title = post.frontmatter?.title || post.fields?.slug\n  const tags = post.frontmatter?.tags\n\n  return (\n    <div className=\"mb-2 bg-gray-50 px-4 py-10 shadow-lg dark:bg-gray-800 sm:rounded-xl sm:p-5\">\n      <Link\n        to={post.fields?.slug || \"\"}\n        itemProp=\"url\"\n        className=\"has-text-black\"\n      >\n        <article\n          className=\"media\"\n          itemScope\n          itemType=\"http://schema.org/Article\"\n        >\n          <div className=\"\">\n            <div className=\"mb-2 text-2xl\">{title}</div>\n            <div className=\"mb-2 text-sm\">{post.frontmatter?.date}</div>\n            <div className=\"mb-2\">\n              {tags?.map(tag => (\n                <Tag key={tag} className=\"mr-1\" tag={tag} withLink={false} />\n              ))}\n            </div>\n            <div\n              className=\"text-base\"\n              dangerouslySetInnerHTML={{\n                __html: post.frontmatter?.description || post.excerpt || \"\",\n              }}\n              itemProp=\"description\"\n            />\n          </div>\n        </article>\n      </Link>\n    </div>\n  )\n}\n","import { dom, library } from \"@fortawesome/fontawesome-svg-core\"\nimport { faGithub, faTwitter } from \"@fortawesome/free-brands-svg-icons\"\nimport { faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\n\nlibrary.add(faGithub, faTwitter, faAngleRight, faAngleLeft)\ndom.watch()\n","import React, { FC } from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { ImageFormat, StaticImage } from \"gatsby-plugin-image\"\nimport \"./fontawesome\"\n\nexport const PureBio: FC<{ data: GatsbyTypes.BioQuery }> = ({ data }) => {\n  const author = data.site?.siteMetadata?.author\n  const social = data.site?.siteMetadata?.social\n  const formats: ImageFormat[] = [\"auto\", \"webp\", \"avif\"]\n\n  return (\n    <div className=\"mb-2 bg-gray-50 p-5 shadow-lg dark:bg-gray-800 sm:rounded-xl \">\n      <div className=\"flex space-x-4\">\n        <div className=\"flex-none\">\n          <StaticImage\n            className=\"bio-avatar\"\n            layout=\"fixed\"\n            formats={formats}\n            src=\"../images/profile-pic.png\"\n            width={180}\n            height={180}\n            quality={95}\n            alt=\"Profile picture\"\n          />\n        </div>\n\n        <div className=\"flex flex-1 flex-col space-y-3\">\n          <div>\n            <p className=\"mb-2 text-3xl\">{author?.name}</p>\n            <p className=\"text-xl\">{author?.summary}</p>\n          </div>\n          <div className=\"flex flex-1 space-x-6\">\n            {social?.map(s => (\n              <a\n                key={s?.name}\n                href={s?.url}\n                className=\"object-bottom\"\n                area-label={s?.name}\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n              >\n                <span className=\"icon\">\n                  <i\n                    className={`fab fa-${s?.name} fa-lg`}\n                    aria-hidden=\"true\"\n                  ></i>\n                </span>\n              </a>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport const Bio = () => {\n  const data: GatsbyTypes.BioQuery = useStaticQuery<GatsbyTypes.BioQuery>(\n    graphql`\n      query Bio {\n        site {\n          siteMetadata {\n            author {\n              name\n              summary\n            }\n            social {\n              name\n              url\n            }\n          }\n        }\n      }\n    `\n  )\n\n  return <PureBio data={data} />\n}\n\nexport default Bio\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport \"./fontawesome\"\n\ninterface ButtonLinkProps {\n  text: string\n  linkTo: string\n  iconName: string\n  rel: string\n  isLeft?: boolean\n}\n\nexport const ButtonLink = ({\n  text,\n  linkTo,\n  iconName,\n  rel,\n  isLeft = true,\n}: ButtonLinkProps) => (\n  <Link\n    className=\"mb-1 box-border border border-blue-400 p-2 text-blue-400 hover:bg-blue-400 hover:text-gray-900 dark:border-blue-700 dark:text-gray-100 dark:hover:bg-blue-700 dark:hover:text-gray-100 lg:mb-0\"\n    to={linkTo}\n    rel={rel}\n  >\n    {isLeft && <i className={`fas fa-${iconName}`} aria-hidden=\"true\" />}\n    <span>{text}</span>\n    {!isLeft && <i className={`fas fa-${iconName}`} aria-hidden=\"true\" />}\n  </Link>\n)\n","import React, { FC } from \"react\"\nimport { Link, PageProps } from \"gatsby\"\n\ninterface Props {\n  title: string\n  location: PageProps[\"location\"]\n}\n\nexport const Layout: FC<Props> = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n\n  return (\n    <div className=\"bg-gray-200 text-gray-900 dark:bg-gray-700 dark:text-gray-100\">\n      <nav\n        className=\"sticky top-0 z-50 flex h-10 bg-blue-300 dark:bg-blue-900\"\n        role=\"navigation\"\n      >\n        <div>\n          <Link\n            className=\"pl-2 text-3xl text-gray-900 dark:text-gray-100\"\n            to=\"/\"\n          >\n            {title}\n          </Link>\n        </div>\n      </nav>\n      <main className=\"container mx-auto mt-1 w-11/12\">\n        <div data-is-root-path={isRootPath}>{children}</div>\n      </main>\n      <footer className=\"flex h-10 bg-gray-300 dark:bg-gray-400\">\n        <div className=\"flex-1 text-gray-900 dark:text-gray-100\">\n          © {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </div>\n      </footer>\n    </div>\n  )\n}\n","import React, { FC } from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { Tag } from \"./Tag\"\n\nexport const PureTagList: FC<{ data: GatsbyTypes.TagListQuery }> = ({\n  data: { allMarkdownRemark },\n}) => {\n  const tags = allMarkdownRemark.group\n\n  return (\n    <div className=\"overflow-auto bg-gray-50 p-5 shadow-lg dark:bg-gray-800 sm:rounded-xl md:max-w-screen-2xl lg:max-w-sm\">\n      {tags.map(tag => (\n        <Tag\n          className=\"float-left mr-1 mb-1\"\n          key={tag.fieldValue}\n          tag={tag.fieldValue}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport const TagList = () => {\n  const data: GatsbyTypes.TagListQuery =\n    useStaticQuery<GatsbyTypes.TagListQuery>(\n      graphql`\n        query TagList {\n          allMarkdownRemark {\n            group(field: frontmatter___tags) {\n              fieldValue\n              totalCount\n            }\n          }\n        }\n      `\n    )\n\n  return <PureTagList data={data} />\n}\n","/**\n * Seo component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React, { FC } from \"react\"\nimport { Helmet } from \"react-helmet-async\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\ntype Props = {\n  description?: string\n  lang?: string\n  meta?: (\n    | { name: string; content: string }\n    | { property: string; content: string }\n  )[]\n  title?: string\n}\n\nconst Seo: FC<Props> = ({\n  description = ``,\n  lang = `ja`,\n  meta = [],\n  title = \"\",\n}) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              name\n              url\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : \"\"}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.name || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nexport default Seo\n","import React, { FC } from \"react\"\nimport { Link, graphql, PageProps } from \"gatsby\"\nimport Seo from \"../components/seo\"\nimport { Layout, Tag } from \"../components\"\n\nconst TagsPage: FC<PageProps<GatsbyTypes.TagPageQuery>> = ({\n  data: { allMarkdownRemark, site },\n  location,\n}) => {\n  const title = site?.siteMetadata?.title\n  const group = allMarkdownRemark.group\n\n  return (\n    <Layout location={location} title={title || \"\"}>\n      <Seo title={title} />\n\n      <h1 itemProp=\"headline\" className=\"mb-2 text-4xl font-extrabold\">\n        タグ一覧\n      </h1>\n\n      <div className=\"my-2\">\n        {group.map(tag => (\n          <Link key={tag.fieldValue} to={`/tags/${tag.fieldValue}/`}>\n            <Tag\n              className=\"mr-1\"\n              tag={`${tag.fieldValue} (${tag.totalCount})`}\n            />\n          </Link>\n        ))}\n      </div>\n    </Layout>\n  )\n}\n\nexport default TagsPage\n\nexport const pageQuery = graphql`\n  query TagPage {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"names":["Tag","tag","className","withLink","React","Link","to","ArticleCard","post","title","frontmatter","fields","_post$fields","slug","tags","_post$frontmatter2","itemProp","itemScope","itemType","_post$frontmatter3","date","map","key","dangerouslySetInnerHTML","__html","description","excerpt","library","faGithub","faTwitter","faAngleRight","faAngleLeft","dom","PureBio","data","author","site","_data$site","siteMetadata","_data$site$siteMetada","social","_data$site2","_data$site2$siteMetad","StaticImage","layout","formats","src","width","height","quality","alt","name","summary","s","href","url","target","rel","Bio","useStaticQuery","ButtonLink","text","linkTo","iconName","isLeft","Layout","location","children","isRootPath","__PATH_PREFIX__","pathname","role","Date","getFullYear","PureTagList","allMarkdownRemark","group","fieldValue","TagList","lang","meta","metaDescription","defaultTitle","_site$siteMetadata","Helmet","htmlAttributes","titleTemplate","content","property","concat","Seo","totalCount"],"sourceRoot":""}