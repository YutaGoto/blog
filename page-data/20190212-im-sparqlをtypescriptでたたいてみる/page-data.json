{"componentChunkName":"component---src-templates-blog-post-js","path":"/20190212-im-sparqlをtypescriptでたたいてみる/","result":{"data":{"site":{"siteMetadata":{"title":".ごっちの日記","siteUrl":"https://yutagoto.github.io"}},"markdownRemark":{"id":"327c08e9-ebe6-58be-8dbb-98b4ed1f1ba0","excerpt":"こんにちは、.ごっちです。 去年末に CiecleCI(ほぼ bash)で im@sparql を curl でたたいてました。\n今日誕生日のアイドルを出力する CircleCI orb をつくったお話\nこんにちは、 .ごっちです。medium.com この記事の bash の curl の URL…","html":"<p>こんにちは、.ごっちです。</p>\n<p>去年末に CiecleCI(ほぼ bash)で im@sparql を curl でたたいてました。\n<a href=\"https://medium.com/@gggooottto/%E4%BB%8A%E6%97%A5%E8%AA%95%E7%94%9F%E6%97%A5%E3%81%AE%E3%82%A2%E3%82%A4%E3%83%89%E3%83%AB%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8Bcircleci-orb%E3%82%92%E3%81%A4%E3%81%8F%E3%81%A3%E3%81%9F%E3%81%8A%E8%A9%B1-fff413118a40\"><strong>今日誕生日のアイドルを出力する CircleCI orb をつくったお話</strong>\n<em>こんにちは、 .ごっちです。</em>medium.com</a></p>\n<p>この記事の bash の curl の URL 自体はすでに例にあったところから持ってきたやつなので、正直なところ創意性がありませんでした()。\n<a href=\"https://sparql.crssnky.xyz/imas/\"><strong>im@sparql</strong>\n<em>広がるアイマスワールドをオープンデータ化 Web やアプリから SPARQL で検索・利用可能なエンドポイント</em>sparql.crssnky.xyz</a></p>\n<iframe src=\"https://medium.com/media/bcaf84fbf3b99a2c0958071f76be200b\" frameborder=0></iframe>\n<p>sparql 自体ぼくも慣れていないこともあったので、今度こそは自分の手で query を作ってみます。</p>\n<p>あと、最近なにかと話題の TypeScript を使ってみます。\n<a href=\"https://www.typescriptlang.org/\"><strong>TypeScript - JavaScript that scales.</strong>\n<em>TypeScript brings you optional static type-checking along with the latest ECMAScript features.</em>www.typescriptlang.org</a></p>\n<h2>できあがったもの</h2>\n<p><a href=\"https://github.com/YutaGoto/imasparql_form\"><strong>YutaGoto/imasparql_form</strong>\n<em>Contribute to YutaGoto/imasparql_form development by creating an account on GitHub.</em>github.com</a>\n<a href=\"https://yutagoto.github.io/imasparql_form/\"><strong>ts</strong>\n<em>Edit description</em>yutagoto.github.io</a></p>\n<p>ひとまず Web フォームにしました。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*ERuaXncUPGXehL-KYOafGg.png\" alt=\"こんなかんじ\"><em>こんなかんじ</em></p>\n<h2>誕生日検索</h2>\n<p>この検索はすでに CircleCI でもたたいたとおりなので、ちょっと改変するだけでおわります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># query.sparql\nPREFIX schema: &lt;[http://schema.org/](http://schema.org/)&gt;\nPREFIX imas: &lt;[https://sparql.crssnky.xyz/imasrdf/URIs/imas-schema.ttl#](https://sparql.crssnky.xyz/imasrdf/URIs/imas-schema.ttl#)&gt;\nSELECT (sample(?n) as ?name)\nWHERE {\n  ?sub schema:birthDate ?o;\n       schema:name ?n;\n  FILTER(regex(str(?o), &#39;02-11&#39; )).\n}group by(?n)</code></pre></div>\n<p>?o(birthDate)に 02-11 が含まれる data を取得してきます。出力はその data の name の部分になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;head&quot;: {\n    &quot;vars&quot;: [ &quot;name&quot; ]\n  } ,\n  &quot;results&quot;: {\n    &quot;bindings&quot;: [\n      {\n        &quot;name&quot;: { &quot;type&quot;: &quot;literal&quot; , &quot;xml:lang&quot;: &quot;ja&quot; , &quot;value&quot;: &quot;浅野風香&quot; }\n      }\n    ]\n  }\n}</code></pre></div>\n<p>あとはこれをいい感じに TypeScript で加工するだけです。</p>\n<h2>名前検索</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># query.sparql\nPREFIX schema: &lt;[http://schema.org/](http://schema.org/)&gt;\nPREFIX imas: &lt;[https://sparql.crssnky.xyz/imasrdf/URIs/imas-schema.ttl#](https://sparql.crssnky.xyz/imasrdf/URIs/imas-schema.ttl#)&gt;\nSELECT (sample(?n) as ?name)\nWHERE {\n  ?s schema:name|imas:nameKana ?on;\n     schema:name ?n;\n  FILTER(CONTAINS(str(?on), &#39;あまみ&#39;)).\n}group by(?n)</code></pre></div>\n<p>?on(name or nameKana) に あまみ が含まれているデータを取得します。出力は上に同じくそのデータの name の部分だけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;head&quot;: {\n    &quot;vars&quot;: [ &quot;name&quot; ]\n  } ,\n  &quot;results&quot;: {\n    &quot;bindings&quot;: [\n      {\n        &quot;name&quot;: { &quot;type&quot;: &quot;literal&quot; , &quot;xml:lang&quot;: &quot;ja&quot; , &quot;value&quot;: &quot;天海春香&quot; }\n      }\n    ]\n  }\n}</code></pre></div>\n<p>ただこの Query にはバグが潜んでいて、 imas:nameKana や schema:name にはアイドル名以外にも系列があるので、そこは直さなければいけない部分です。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># query.sparql\nPREFIX schema: &lt;[http://schema.org/](http://schema.org/)&gt;\nPREFIX imas: &lt;[https://sparql.crssnky.xyz/imasrdf/URIs/imas-schema.ttl#](https://sparql.crssnky.xyz/imasrdf/URIs/imas-schema.ttl#)&gt;\nSELECT (sample(?n) as ?name)\nWHERE {\n  ?s schema:name|imas:nameKana ?on;\n     schema:name ?n;\n  FILTER(CONTAINS(str(?on), &#39;夕美&#39;)).\n}group by(?n)</code></pre></div>\n<p>—</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;head&quot;: {\n    &quot;vars&quot;: [ &quot;name&quot; ]\n  } ,\n  &quot;results&quot;: {\n    &quot;bindings&quot;: [\n      {\n        &quot;name&quot;: { &quot;type&quot;: &quot;literal&quot; , &quot;xml:lang&quot;: &quot;ja&quot; , &quot;value&quot;: &quot;相葉夕美&quot; }\n      } ,\n      {\n        &quot;name&quot;: { &quot;type&quot;: &quot;literal&quot; , &quot;xml:lang&quot;: &quot;ja&quot; , &quot;value&quot;: &quot;夕美が思うお花みたいに綺麗なアイドル&quot; }\n      } ,\n      {\n        &quot;name&quot;: { &quot;type&quot;: &quot;literal&quot; , &quot;xml:lang&quot;: &quot;ja&quot; , &quot;value&quot;: &quot;夕美が一緒にお花のお世話をしたいアイドル&quot; }\n      }\n    ]\n  }\n}</code></pre></div>\n<p>本当は相葉夕美だけを取得できればいいんですが、シンデレラガール総選挙の他のアイドルを紹介するときの名前なども一緒についてきてしまうので、修正する必要があります。。。</p>\n<iframe src=\"https://medium.com/media/a34d7cf97131cab517a5e13dd730e3f1\" frameborder=0></iframe>\n<h2>SPARQL の所感</h2>\n<p>コツさえ掴んでしまえば割といけるなぁといった感じです。最初に RDF にどんなデータがどんな名前で存在しているか調査するのも大変かなぁという感じです。</p>\n<p>データの繋がり方や取得の仕方さえわかってしまえば、あとは書くだけなのでそのへんは SQL と何も変わらない気がしています。</p>\n<p>Sparql そのものの書き方は他の記事を参照しています。\n<a href=\"http://www.asahi-net.or.jp/~ax2s-kmtn/internet/rdf/rdf-sparql-query.html\"><strong>RDF 用クエリ言語 SPARQL</strong>\n<em>RDF は、ウェブ上で情報を表わすための、有向性の、ラベル付けされたグラフ・データ形式です。この仕様では、RDF に対する SPARQL クエリ言語の構文とセマンティクスを定義しています。SPARQL は、データが RDF そのものとして保存されているか…</em>www.asahi-net.or.jp</a></p>\n<h2>TypeScript の所感</h2>\n<p>書いた量が量というのもあり、まだ TypeScript の恩恵(型定義や class をいい感じに管理するなど)を受けられていないのですが、もうちょっと TypeScript っぽく書きたいなぁとかは思っています。 BestPrctice をあさってきます。</p>\n<h2>今後</h2>\n<p>アイドルからユニットを検索したり、都道府県からアイドルを検索したりと Web フォームでサクッといけそうな部分はちょこちょこ書いていきたいです。</p>\n<h2>References</h2>\n<ul>\n<li>今日誕生日のアイドルを出力する CircleCI orb をつくったお話, <a href=\"https://medium.com/@gggooottto/%E4%BB%8A%E6%97%A5%E8%AA%95%E7%94%9F%E6%97%A5%E3%81%AE%E3%82%A2%E3%82%A4%E3%83%89%E3%83%AB%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8Bcircleci-orb%E3%82%92%E3%81%A4%E3%81%8F%E3%81%A3%E3%81%9F%E3%81%8A%E8%A9%B1-fff413118a40\">https://medium.com/@gggooottto/%E4%BB%8A%E6%97%A5%E8%AA%95%E7%94%9F%E6%97%A5%E3%81%AE%E3%82%A2%E3%82%A4%E3%83%89%E3%83%AB%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8Bcircleci-orb%E3%82%92%E3%81%A4%E3%81%8F%E3%81%A3%E3%81%9F%E3%81%8A%E8%A9%B1-fff413118a40</a></li>\n<li>im@sparql, <a href=\"https://sparql.crssnky.xyz/imas/\">https://sparql.crssnky.xyz/imas/</a></li>\n<li>TypeScript — JavaScript that scales., <a href=\"https://www.typescriptlang.org/\">https://www.typescriptlang.org/</a></li>\n<li>YutaGoto/imasparql<em>form, [<a href=\"https://github.com/YutaGoto/imasparql\">https://github.com/YutaGoto/imasparql</a></em>form](<a href=\"https://github.com/YutaGoto/imasparql_form\">https://github.com/YutaGoto/imasparql_form</a>)</li>\n<li>RDF 用クエリ言語 SPARQL, <a href=\"http://www.asahi-net.or.jp/~ax2s-kmtn/internet/rdf/rdf-sparql-query.html\">http://www.asahi-net.or.jp/~ax2s-kmtn/internet/rdf/rdf-sparql-query.html</a></li>\n</ul>","fields":{"slug":"/20190212-im-sparqlをtypescriptでたたいてみる/"},"frontmatter":{"title":"im@sparqlをTypeScriptでたたいてみる","date":"February 12, 2019","description":"im@sparqlをTypeScriptでたたいてみる"}},"previous":{"fields":{"slug":"/20190203-todays-idol-travis-ciを作ってみた/"},"frontmatter":{"title":"todays-idol-travis-ciを作ってみた"}},"next":{"fields":{"slug":"/20190217-wakatimeで自分のコーディングを数値化してみた/"},"frontmatter":{"title":"WakaTimeで自分のコーディングを数値化してみた"}}},"pageContext":{"id":"327c08e9-ebe6-58be-8dbb-98b4ed1f1ba0","previousPostId":"3153b5bb-3659-5bff-93aa-bbce65b6ac95","nextPostId":"9c71eba9-1310-54e7-9da4-7f37dfb750ab"}},"staticQueryHashes":["2137539840","2201837728"]}